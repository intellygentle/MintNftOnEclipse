import { Serializer } from '@metaplex-foundation/umi/serializers';
import { Asset } from '..';
import { Attributes, Blob, Bucket, Creators, ExtensionType, Grouping, Links, Manager, Metadata, Proxy } from '../generated';
import { Royalties } from './royalties';
import { Properties } from './properties';
export * from './attributes';
export * from './blob';
export * from './bucket';
export * from './creators';
export * from './grouping';
export * from './links';
export * from './manager';
export * from './metadata';
export * from './properties';
export * from './royalties';
export type TypedExtension = ({
    type: ExtensionType.Attributes;
} & Attributes) | ({
    type: ExtensionType.Blob;
} & Blob) | ({
    type: ExtensionType.Creators;
} & Creators) | ({
    type: ExtensionType.Links;
} & Links) | ({
    type: ExtensionType.Metadata;
} & Metadata) | ({
    type: ExtensionType.Grouping;
} & Grouping) | ({
    type: ExtensionType.Royalties;
} & Royalties) | ({
    type: ExtensionType.Manager;
} & Manager) | ({
    type: ExtensionType.Proxy;
} & Proxy) | ({
    type: ExtensionType.Properties;
} & Properties) | ({
    type: ExtensionType.Bucket;
} & Bucket);
export declare const getExtensionSerializerFromType: <T extends TypedExtension>(type: ExtensionType) => Serializer<T, T>;
type TypedExtensionfromEnum<T extends ExtensionType> = Extract<TypedExtension, {
    type: T;
}>;
export declare function getExtension<T extends ExtensionType>(asset: Asset, extensionType: T): TypedExtensionfromEnum<T> | undefined;
