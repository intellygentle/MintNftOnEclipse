"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getExtension = exports.getExtensionSerializerFromType = void 0;
const generated_1 = require("../generated");
const royalties_1 = require("./royalties");
const properties_1 = require("./properties");
__exportStar(require("./attributes"), exports);
__exportStar(require("./blob"), exports);
__exportStar(require("./bucket"), exports);
__exportStar(require("./creators"), exports);
__exportStar(require("./grouping"), exports);
__exportStar(require("./links"), exports);
__exportStar(require("./manager"), exports);
__exportStar(require("./metadata"), exports);
__exportStar(require("./properties"), exports);
__exportStar(require("./royalties"), exports);
const getExtensionSerializerFromType = (type) => (() => {
    switch (type) {
        case generated_1.ExtensionType.Attributes:
            return (0, generated_1.getAttributesSerializer)();
        case generated_1.ExtensionType.Blob:
            return (0, generated_1.getBlobSerializer)();
        case generated_1.ExtensionType.Creators:
            return (0, generated_1.getCreatorsSerializer)();
        case generated_1.ExtensionType.Links:
            return (0, generated_1.getLinksSerializer)();
        case generated_1.ExtensionType.Metadata:
            return (0, generated_1.getMetadataSerializer)();
        case generated_1.ExtensionType.Grouping:
            return (0, generated_1.getGroupingSerializer)();
        case generated_1.ExtensionType.Royalties:
            return (0, royalties_1.getRoyaltiesSerializer)();
        case generated_1.ExtensionType.Manager:
            return (0, generated_1.getManagerSerializer)();
        case generated_1.ExtensionType.Proxy:
            return (0, generated_1.getProxySerializer)();
        case generated_1.ExtensionType.Properties:
            return (0, properties_1.getPropertiesSerializer)();
        case generated_1.ExtensionType.Bucket:
            return (0, generated_1.getBucketSerializer)();
        default:
            throw new Error(`Unknown extension type: ${type}`);
    }
})();
exports.getExtensionSerializerFromType = getExtensionSerializerFromType;
function getExtension(asset, extensionType) {
    const extension = asset.extensions.find((e) => 'type' in e && e.type === extensionType);
    return extension ? extension : undefined;
}
exports.getExtension = getExtension;
//# sourceMappingURL=index.js.map