"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBooleanSerializer = exports.getNumberSerializer = exports.getTextSerializer = exports.getTypeFromString = exports.getPropertySerializerFromType = exports.getPropertySerializer = exports.getPropertiesSerializer = exports.getProperty = exports.properties = void 0;
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const _1 = require(".");
const generated_1 = require("../generated");
const properties = (values) => ({
    type: generated_1.ExtensionType.Properties,
    values: values.map((property) => ({
        type: (0, exports.getTypeFromString)(typeof property.value),
        ...property,
    })),
});
exports.properties = properties;
function getProperty(asset, name, type) {
    const extension = (0, _1.getExtension)(asset, generated_1.ExtensionType.Properties);
    if (!extension) {
        return undefined;
    }
    const property = extension.values.find((p) => 'type' in p && p.type === type && p.name === name);
    return property ? property : undefined;
}
exports.getProperty = getProperty;
function getPropertiesSerializer() {
    return (0, serializers_1.struct)([['values', (0, serializers_1.array)((0, exports.getPropertySerializer)(), { size: 'remainder' })]], { description: 'Properties' });
}
exports.getPropertiesSerializer = getPropertiesSerializer;
const getPropertySerializer = () => ({
    description: 'TypedProperty',
    fixedSize: null,
    maxSize: null,
    serialize: (property) => (0, exports.getPropertySerializerFromType)(property.type).serialize(property),
    deserialize: (buffer, offset = 0) => {
        const [, nameOffset] = (0, serializers_1.string)({ size: (0, serializers_1.u8)() }).deserialize(buffer, offset);
        const type = buffer[nameOffset];
        return (0, exports.getPropertySerializerFromType)(type).deserialize(buffer, offset);
    },
});
exports.getPropertySerializer = getPropertySerializer;
const getPropertySerializerFromType = (type) => (() => {
    switch (type) {
        case generated_1.Type.Text:
            return getTextSerializer();
        case generated_1.Type.Number:
            return getNumberSerializer();
        case generated_1.Type.Boolean:
            return getBooleanSerializer();
        default:
            throw new Error(`Unknown property type: ${type}`);
    }
})();
exports.getPropertySerializerFromType = getPropertySerializerFromType;
const getTypeFromString = (type) => {
    switch (type) {
        case 'string':
            return generated_1.Type.Text;
        case 'boolean':
            return generated_1.Type.Boolean;
        default:
            return generated_1.Type.Number;
    }
};
exports.getTypeFromString = getTypeFromString;
function getTextSerializer() {
    return (0, serializers_1.struct)([
        ['name', (0, serializers_1.string)({ size: (0, serializers_1.u8)() })],
        ['type', (0, generated_1.getTypeSerializer)()],
        ['value', (0, serializers_1.string)({ size: (0, serializers_1.u8)() })],
    ], { description: 'Text' });
}
exports.getTextSerializer = getTextSerializer;
function getNumberSerializer() {
    return (0, serializers_1.struct)([
        ['name', (0, serializers_1.string)({ size: (0, serializers_1.u8)() })],
        ['type', (0, generated_1.getTypeSerializer)()],
        ['value', (0, serializers_1.u64)()],
    ], { description: 'Number' });
}
exports.getNumberSerializer = getNumberSerializer;
function getBooleanSerializer() {
    return (0, serializers_1.struct)([
        ['name', (0, serializers_1.string)({ size: (0, serializers_1.u8)() })],
        ['type', (0, generated_1.getTypeSerializer)()],
        ['value', (0, serializers_1.bool)()],
    ], { description: 'Boolean' });
}
exports.getBooleanSerializer = getBooleanSerializer;
//# sourceMappingURL=properties.js.map