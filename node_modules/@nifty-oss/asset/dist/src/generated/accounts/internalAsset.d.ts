/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { InternalAssetAccountData, NullablePublicKeyArgs } from '../../hooked';
import { DelegateArgs, DiscriminatorArgs, StandardArgs, StateArgs } from '../types';
export type InternalAsset = Account<InternalAssetAccountData>;
export declare function deserializeInternalAsset(rawAccount: RpcAccount): InternalAsset;
export declare function fetchInternalAsset(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<InternalAsset>;
export declare function safeFetchInternalAsset(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<InternalAsset | null>;
export declare function fetchAllInternalAsset(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<InternalAsset[]>;
export declare function safeFetchAllInternalAsset(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<InternalAsset[]>;
export declare function getInternalAssetGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<InternalAsset, {
    discriminator: DiscriminatorArgs;
    state: StateArgs;
    standard: StandardArgs;
    mutable: boolean;
    owner: PublicKey;
    group: NullablePublicKeyArgs;
    authority: PublicKey;
    delegate: DelegateArgs;
    name: string;
}>;
