"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInternalAssetGpaBuilder = exports.safeFetchAllInternalAsset = exports.fetchAllInternalAsset = exports.safeFetchInternalAsset = exports.fetchInternalAsset = exports.deserializeInternalAsset = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const types_1 = require("../types");
function deserializeInternalAsset(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, (0, hooked_1.getInternalAssetAccountDataSerializer)());
}
exports.deserializeInternalAsset = deserializeInternalAsset;
async function fetchInternalAsset(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'InternalAsset');
    return deserializeInternalAsset(maybeAccount);
}
exports.fetchInternalAsset = fetchInternalAsset;
async function safeFetchInternalAsset(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeInternalAsset(maybeAccount) : null;
}
exports.safeFetchInternalAsset = safeFetchInternalAsset;
async function fetchAllInternalAsset(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'InternalAsset');
        return deserializeInternalAsset(maybeAccount);
    });
}
exports.fetchAllInternalAsset = fetchAllInternalAsset;
async function safeFetchAllInternalAsset(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeInternalAsset(maybeAccount));
}
exports.safeFetchAllInternalAsset = safeFetchAllInternalAsset;
function getInternalAssetGpaBuilder(context) {
    const programId = context.programs.getPublicKey('asset', 'AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, types_1.getDiscriminatorSerializer)()],
        state: [1, (0, types_1.getStateSerializer)()],
        standard: [2, (0, types_1.getStandardSerializer)()],
        mutable: [3, (0, serializers_1.bool)()],
        owner: [4, (0, serializers_1.publicKey)()],
        group: [36, (0, hooked_1.getNullablePublicKeySerializer)()],
        authority: [null, (0, serializers_1.publicKey)()],
        delegate: [null, (0, types_1.getDelegateSerializer)()],
        name: [null, (0, serializers_1.string)({ size: 35 })],
    })
        .deserializeUsing((account) => deserializeInternalAsset(account));
}
exports.getInternalAssetGpaBuilder = getInternalAssetGpaBuilder;
//# sourceMappingURL=internalAsset.js.map