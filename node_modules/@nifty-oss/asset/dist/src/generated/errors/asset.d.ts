/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** AlreadyInitialized: Asset already initialized */
export declare class AlreadyInitializedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAccountLength: Invalid account length */
export declare class InvalidAccountLengthError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IncompleteExtensionData: Incomplete extension data */
export declare class IncompleteExtensionDataError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** Uninitialized: Uninitialized account */
export declare class UninitializedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExtensionNotFound: Extension not found */
export declare class ExtensionNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAlignment: Invalid alignment */
export declare class InvalidAlignmentError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidBurnAuthority: Invalid owner or burn delegate */
export declare class InvalidBurnAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidTransferAuthority: Invalid owner or transfer delegate */
export declare class InvalidTransferAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** DelegateNotFound: Delegate not found */
export declare class DelegateNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** DelegateRoleNotActive: Delegate role not active */
export declare class DelegateRoleNotActiveError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidDelegate: Invalid delegate */
export declare class InvalidDelegateError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAssetOwner: Invalid asset owner */
export declare class InvalidAssetOwnerError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** LockedAsset: Asset is locked */
export declare class LockedAssetError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidAuthority: Invalid authority */
export declare class InvalidAuthorityError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ImmutableAsset: Immutable asset */
export declare class ImmutableAssetError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CannotTransferSoulbound: Soulbound assets are non-transferable */
export declare class CannotTransferSoulboundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExtensionDataInvalid: Extension data invalid */
export declare class ExtensionDataInvalidError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidGroup: Invalid group */
export declare class InvalidGroupError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AssertionFailure: Assertion Failure */
export declare class AssertionFailureError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** GroupNotEmpty: Group is not empty */
export declare class GroupNotEmptyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AlreadyInGroup: Asset is already in a group */
export declare class AlreadyInGroupError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** ExtensionLengthInvalid: Extension length invalid */
export declare class ExtensionLengthInvalidError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getAssetErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getAssetErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
