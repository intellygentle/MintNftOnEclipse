"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAssetErrorFromName = exports.getAssetErrorFromCode = exports.ExtensionLengthInvalidError = exports.AlreadyInGroupError = exports.GroupNotEmptyError = exports.AssertionFailureError = exports.InvalidGroupError = exports.ExtensionDataInvalidError = exports.CannotTransferSoulboundError = exports.ImmutableAssetError = exports.InvalidAuthorityError = exports.LockedAssetError = exports.InvalidAssetOwnerError = exports.InvalidDelegateError = exports.DelegateRoleNotActiveError = exports.DelegateNotFoundError = exports.InvalidTransferAuthorityError = exports.InvalidBurnAuthorityError = exports.InvalidAlignmentError = exports.ExtensionNotFoundError = exports.UninitializedError = exports.IncompleteExtensionDataError = exports.InvalidAccountLengthError = exports.AlreadyInitializedError = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const codeToErrorMap = new Map();
const nameToErrorMap = new Map();
/** AlreadyInitialized: Asset already initialized */
class AlreadyInitializedError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Asset already initialized', program, cause);
        this.name = 'AlreadyInitialized';
        this.code = 0x0; // 0
    }
}
exports.AlreadyInitializedError = AlreadyInitializedError;
codeToErrorMap.set(0x0, AlreadyInitializedError);
nameToErrorMap.set('AlreadyInitialized', AlreadyInitializedError);
/** InvalidAccountLength: Invalid account length */
class InvalidAccountLengthError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid account length', program, cause);
        this.name = 'InvalidAccountLength';
        this.code = 0x1; // 1
    }
}
exports.InvalidAccountLengthError = InvalidAccountLengthError;
codeToErrorMap.set(0x1, InvalidAccountLengthError);
nameToErrorMap.set('InvalidAccountLength', InvalidAccountLengthError);
/** IncompleteExtensionData: Incomplete extension data */
class IncompleteExtensionDataError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Incomplete extension data', program, cause);
        this.name = 'IncompleteExtensionData';
        this.code = 0x2; // 2
    }
}
exports.IncompleteExtensionDataError = IncompleteExtensionDataError;
codeToErrorMap.set(0x2, IncompleteExtensionDataError);
nameToErrorMap.set('IncompleteExtensionData', IncompleteExtensionDataError);
/** Uninitialized: Uninitialized account */
class UninitializedError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Uninitialized account', program, cause);
        this.name = 'Uninitialized';
        this.code = 0x3; // 3
    }
}
exports.UninitializedError = UninitializedError;
codeToErrorMap.set(0x3, UninitializedError);
nameToErrorMap.set('Uninitialized', UninitializedError);
/** ExtensionNotFound: Extension not found */
class ExtensionNotFoundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Extension not found', program, cause);
        this.name = 'ExtensionNotFound';
        this.code = 0x4; // 4
    }
}
exports.ExtensionNotFoundError = ExtensionNotFoundError;
codeToErrorMap.set(0x4, ExtensionNotFoundError);
nameToErrorMap.set('ExtensionNotFound', ExtensionNotFoundError);
/** InvalidAlignment: Invalid alignment */
class InvalidAlignmentError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid alignment', program, cause);
        this.name = 'InvalidAlignment';
        this.code = 0x5; // 5
    }
}
exports.InvalidAlignmentError = InvalidAlignmentError;
codeToErrorMap.set(0x5, InvalidAlignmentError);
nameToErrorMap.set('InvalidAlignment', InvalidAlignmentError);
/** InvalidBurnAuthority: Invalid owner or burn delegate */
class InvalidBurnAuthorityError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid owner or burn delegate', program, cause);
        this.name = 'InvalidBurnAuthority';
        this.code = 0x6; // 6
    }
}
exports.InvalidBurnAuthorityError = InvalidBurnAuthorityError;
codeToErrorMap.set(0x6, InvalidBurnAuthorityError);
nameToErrorMap.set('InvalidBurnAuthority', InvalidBurnAuthorityError);
/** InvalidTransferAuthority: Invalid owner or transfer delegate */
class InvalidTransferAuthorityError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid owner or transfer delegate', program, cause);
        this.name = 'InvalidTransferAuthority';
        this.code = 0x7; // 7
    }
}
exports.InvalidTransferAuthorityError = InvalidTransferAuthorityError;
codeToErrorMap.set(0x7, InvalidTransferAuthorityError);
nameToErrorMap.set('InvalidTransferAuthority', InvalidTransferAuthorityError);
/** DelegateNotFound: Delegate not found */
class DelegateNotFoundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Delegate not found', program, cause);
        this.name = 'DelegateNotFound';
        this.code = 0x8; // 8
    }
}
exports.DelegateNotFoundError = DelegateNotFoundError;
codeToErrorMap.set(0x8, DelegateNotFoundError);
nameToErrorMap.set('DelegateNotFound', DelegateNotFoundError);
/** DelegateRoleNotActive: Delegate role not active */
class DelegateRoleNotActiveError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Delegate role not active', program, cause);
        this.name = 'DelegateRoleNotActive';
        this.code = 0x9; // 9
    }
}
exports.DelegateRoleNotActiveError = DelegateRoleNotActiveError;
codeToErrorMap.set(0x9, DelegateRoleNotActiveError);
nameToErrorMap.set('DelegateRoleNotActive', DelegateRoleNotActiveError);
/** InvalidDelegate: Invalid delegate */
class InvalidDelegateError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid delegate', program, cause);
        this.name = 'InvalidDelegate';
        this.code = 0xa; // 10
    }
}
exports.InvalidDelegateError = InvalidDelegateError;
codeToErrorMap.set(0xa, InvalidDelegateError);
nameToErrorMap.set('InvalidDelegate', InvalidDelegateError);
/** InvalidAssetOwner: Invalid asset owner */
class InvalidAssetOwnerError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid asset owner', program, cause);
        this.name = 'InvalidAssetOwner';
        this.code = 0xb; // 11
    }
}
exports.InvalidAssetOwnerError = InvalidAssetOwnerError;
codeToErrorMap.set(0xb, InvalidAssetOwnerError);
nameToErrorMap.set('InvalidAssetOwner', InvalidAssetOwnerError);
/** LockedAsset: Asset is locked */
class LockedAssetError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Asset is locked', program, cause);
        this.name = 'LockedAsset';
        this.code = 0xc; // 12
    }
}
exports.LockedAssetError = LockedAssetError;
codeToErrorMap.set(0xc, LockedAssetError);
nameToErrorMap.set('LockedAsset', LockedAssetError);
/** InvalidAuthority: Invalid authority */
class InvalidAuthorityError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid authority', program, cause);
        this.name = 'InvalidAuthority';
        this.code = 0xd; // 13
    }
}
exports.InvalidAuthorityError = InvalidAuthorityError;
codeToErrorMap.set(0xd, InvalidAuthorityError);
nameToErrorMap.set('InvalidAuthority', InvalidAuthorityError);
/** ImmutableAsset: Immutable asset */
class ImmutableAssetError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Immutable asset', program, cause);
        this.name = 'ImmutableAsset';
        this.code = 0xe; // 14
    }
}
exports.ImmutableAssetError = ImmutableAssetError;
codeToErrorMap.set(0xe, ImmutableAssetError);
nameToErrorMap.set('ImmutableAsset', ImmutableAssetError);
/** CannotTransferSoulbound: Soulbound assets are non-transferable */
class CannotTransferSoulboundError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Soulbound assets are non-transferable', program, cause);
        this.name = 'CannotTransferSoulbound';
        this.code = 0xf; // 15
    }
}
exports.CannotTransferSoulboundError = CannotTransferSoulboundError;
codeToErrorMap.set(0xf, CannotTransferSoulboundError);
nameToErrorMap.set('CannotTransferSoulbound', CannotTransferSoulboundError);
/** ExtensionDataInvalid: Extension data invalid */
class ExtensionDataInvalidError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Extension data invalid', program, cause);
        this.name = 'ExtensionDataInvalid';
        this.code = 0x10; // 16
    }
}
exports.ExtensionDataInvalidError = ExtensionDataInvalidError;
codeToErrorMap.set(0x10, ExtensionDataInvalidError);
nameToErrorMap.set('ExtensionDataInvalid', ExtensionDataInvalidError);
/** InvalidGroup: Invalid group */
class InvalidGroupError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Invalid group', program, cause);
        this.name = 'InvalidGroup';
        this.code = 0x11; // 17
    }
}
exports.InvalidGroupError = InvalidGroupError;
codeToErrorMap.set(0x11, InvalidGroupError);
nameToErrorMap.set('InvalidGroup', InvalidGroupError);
/** AssertionFailure: Assertion Failure */
class AssertionFailureError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Assertion Failure', program, cause);
        this.name = 'AssertionFailure';
        this.code = 0x12; // 18
    }
}
exports.AssertionFailureError = AssertionFailureError;
codeToErrorMap.set(0x12, AssertionFailureError);
nameToErrorMap.set('AssertionFailure', AssertionFailureError);
/** GroupNotEmpty: Group is not empty */
class GroupNotEmptyError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Group is not empty', program, cause);
        this.name = 'GroupNotEmpty';
        this.code = 0x13; // 19
    }
}
exports.GroupNotEmptyError = GroupNotEmptyError;
codeToErrorMap.set(0x13, GroupNotEmptyError);
nameToErrorMap.set('GroupNotEmpty', GroupNotEmptyError);
/** AlreadyInGroup: Asset is already in a group */
class AlreadyInGroupError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Asset is already in a group', program, cause);
        this.name = 'AlreadyInGroup';
        this.code = 0x14; // 20
    }
}
exports.AlreadyInGroupError = AlreadyInGroupError;
codeToErrorMap.set(0x14, AlreadyInGroupError);
nameToErrorMap.set('AlreadyInGroup', AlreadyInGroupError);
/** ExtensionLengthInvalid: Extension length invalid */
class ExtensionLengthInvalidError extends umi_1.ProgramError {
    constructor(program, cause) {
        super('Extension length invalid', program, cause);
        this.name = 'ExtensionLengthInvalid';
        this.code = 0x15; // 21
    }
}
exports.ExtensionLengthInvalidError = ExtensionLengthInvalidError;
codeToErrorMap.set(0x15, ExtensionLengthInvalidError);
nameToErrorMap.set('ExtensionLengthInvalid', ExtensionLengthInvalidError);
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
function getAssetErrorFromCode(code, program, cause) {
    const constructor = codeToErrorMap.get(code);
    return constructor ? new constructor(program, cause) : null;
}
exports.getAssetErrorFromCode = getAssetErrorFromCode;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
function getAssetErrorFromName(name, program, cause) {
    const constructor = nameToErrorMap.get(name);
    return constructor ? new constructor(program, cause) : null;
}
exports.getAssetErrorFromName = getAssetErrorFromName;
//# sourceMappingURL=asset.js.map