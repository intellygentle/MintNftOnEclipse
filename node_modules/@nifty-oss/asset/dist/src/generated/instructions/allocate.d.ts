/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { ExtensionInput, ExtensionInputArgs } from '../types';
export type AllocateInstructionAccounts = {
    /** Asset account */
    asset: Signer;
    /** The account paying for the storage fees */
    payer?: Signer;
    /** The system program */
    systemProgram?: PublicKey | Pda;
};
export type AllocateInstructionData = {
    discriminator: number;
    extension: ExtensionInput;
};
export type AllocateInstructionDataArgs = {
    extension: ExtensionInputArgs;
};
export declare function getAllocateInstructionDataSerializer(): Serializer<AllocateInstructionDataArgs, AllocateInstructionData>;
export type AllocateInstructionArgs = AllocateInstructionDataArgs;
export declare function allocate(context: Pick<Context, 'programs'>, input: AllocateInstructionAccounts & AllocateInstructionArgs): TransactionBuilder;
