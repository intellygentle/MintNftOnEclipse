/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { ExtensionInput, ExtensionInputArgs, Standard, StandardArgs } from '../types';
export type CreateInstructionAccounts = {
    /** Asset account */
    asset: Signer;
    /** The authority of the asset */
    authority?: PublicKey | Pda | Signer;
    /** The owner of the asset */
    owner?: PublicKey | Pda;
    /** Asset account of the group */
    group?: PublicKey | Pda;
    /** Optional authority for minting assets into a group */
    groupAuthority?: Signer;
    /** The account paying for the storage fees */
    payer?: Signer;
    /** The system program */
    systemProgram?: PublicKey | Pda;
};
export type CreateInstructionData = {
    discriminator: number;
    name: string;
    standard: Standard;
    mutable: boolean;
    extensions: Option<Array<ExtensionInput>>;
};
export type CreateInstructionDataArgs = {
    name: string;
    standard?: StandardArgs;
    mutable?: boolean;
    extensions?: OptionOrNullable<Array<ExtensionInputArgs>>;
};
export declare function getCreateInstructionDataSerializer(): Serializer<CreateInstructionDataArgs, CreateInstructionData>;
export type CreateInstructionArgs = CreateInstructionDataArgs;
export declare function create(context: Pick<Context, 'identity' | 'programs'>, input: CreateInstructionAccounts & CreateInstructionArgs): TransactionBuilder;
