"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.getCreateInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
const types_1 = require("../types");
function getCreateInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['name', (0, serializers_1.string)()],
        ['standard', (0, types_1.getStandardSerializer)()],
        ['mutable', (0, serializers_1.bool)()],
        ['extensions', (0, serializers_1.option)((0, serializers_1.array)((0, types_1.getExtensionInputSerializer)()))],
    ], { description: 'CreateInstructionData' }), (value) => ({
        ...value,
        discriminator: 2,
        standard: value.standard ?? types_1.Standard.NonFungible,
        mutable: value.mutable ?? true,
        extensions: value.extensions ?? (0, umi_1.none)(),
    }));
}
exports.getCreateInstructionDataSerializer = getCreateInstructionDataSerializer;
// Instruction.
function create(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('asset', 'AssetGtQBTSgm5s91d1RAQod5JmaZiJDxqsgtqrZud73');
    // Accounts.
    const resolvedAccounts = {
        asset: {
            index: 0,
            isWritable: true,
            value: input.asset ?? null,
        },
        authority: {
            index: 1,
            isWritable: false,
            value: input.authority ?? null,
        },
        owner: {
            index: 2,
            isWritable: false,
            value: input.owner ?? null,
        },
        group: {
            index: 3,
            isWritable: true,
            value: input.group ?? null,
        },
        groupAuthority: {
            index: 4,
            isWritable: false,
            value: input.groupAuthority ?? null,
        },
        payer: {
            index: 5,
            isWritable: true,
            value: input.payer ?? null,
        },
        systemProgram: {
            index: 6,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.authority.value) {
        resolvedAccounts.authority.value = context.identity;
    }
    if (!resolvedAccounts.owner.value) {
        resolvedAccounts.owner.value = context.identity.publicKey;
    }
    if (!resolvedAccounts.systemProgram.value) {
        if (resolvedAccounts.payer.value) {
            resolvedAccounts.systemProgram.value = context.programs.getPublicKey('systemProgram', '11111111111111111111111111111111');
            resolvedAccounts.systemProgram.isWritable = false;
        }
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCreateInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.create = create;
//# sourceMappingURL=create.js.map