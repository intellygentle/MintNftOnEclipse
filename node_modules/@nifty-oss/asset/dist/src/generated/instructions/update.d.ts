/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Option, OptionOrNullable, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { ExtensionInput, ExtensionInputArgs } from '../types';
export type UpdateInstructionAccounts = {
    /** Asset account */
    asset: PublicKey | Pda;
    /** The authority of the asset */
    authority?: Signer;
    /** Extension (asset) buffer account */
    buffer?: PublicKey | Pda;
    /** The asset defining the group, if applicable */
    group?: PublicKey | Pda;
    /** The account paying for the storage fees */
    payer?: Signer;
    /** The system program */
    systemProgram?: PublicKey | Pda;
};
export type UpdateInstructionData = {
    discriminator: number;
    name: Option<string>;
    mutable: Option<boolean>;
    extension: Option<ExtensionInput>;
};
export type UpdateInstructionDataArgs = {
    name?: OptionOrNullable<string>;
    mutable?: OptionOrNullable<boolean>;
    extension?: OptionOrNullable<ExtensionInputArgs>;
};
export declare function getUpdateInstructionDataSerializer(): Serializer<UpdateInstructionDataArgs, UpdateInstructionData>;
export type UpdateInstructionArgs = UpdateInstructionDataArgs;
export declare function update(context: Pick<Context, 'identity' | 'programs'>, input: UpdateInstructionAccounts & UpdateInstructionArgs): TransactionBuilder;
