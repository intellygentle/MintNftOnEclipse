"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getInternalAssetAccountDataSerializer = void 0;
const extensions_1 = require("../extensions");
const generated_1 = require("../generated");
const internalAssetAccountData_1 = require("../generated/types/internalAssetAccountData");
const extensionHeader_1 = require("../generated/types/extensionHeader");
const getInternalAssetAccountDataSerializer = () => ({
    description: 'AssetAccountData',
    fixedSize: null,
    maxSize: null,
    serialize: () => {
        throw new Error('Operation not supported.');
    },
    deserialize: (buffer, offset = 0) => {
        // Account.
        const [asset, assetOffset] = (0, internalAssetAccountData_1.getInternalAssetAccountDataSerializer)().deserialize(buffer, offset);
        if (asset.discriminator !== generated_1.Discriminator.Asset) {
            throw new Error(`Expected an Asset account, got account discriminator: ${asset.discriminator}`);
        }
        let finalOffset = assetOffset;
        const extensions = [];
        // Extensions.
        while (finalOffset < buffer.length) {
            const [header, headerOffset] = (0, extensionHeader_1.getExtensionHeaderSerializer)().deserialize(buffer, finalOffset);
            const type = header.kind;
            if (type === generated_1.ExtensionType.None) {
                break;
            }
            else if (generated_1.ExtensionType[type]) {
                let endOffset = headerOffset + header.length;
                if (type === generated_1.ExtensionType.Metadata) {
                    // backwards compatibility for metadata extension: there is now an 'imageUrl'
                    // on the extension, so we use the extra padding to simulate having it for
                    // assets created before the change.
                    endOffset = header.boundary;
                }
                const [extension] = (0, extensions_1.getExtensionSerializerFromType)(type).deserialize(buffer.subarray(headerOffset, endOffset));
                extensions.push({ ...extension, type });
            }
            finalOffset = header.boundary;
        }
        return [
            {
                ...asset,
                delegate: asset.delegate.address ? asset.delegate : null,
                extensions,
            },
            finalOffset,
        ];
    },
});
exports.getInternalAssetAccountDataSerializer = getInternalAssetAccountDataSerializer;
//# sourceMappingURL=internalAssetAccountData.js.map